#include<iostream>
#include<vector>
using namespace std;

int n, m, min_val;
int map[50][50];
bool check[50][50];
vector<pair<int, int>> chi;

int bfs() {
	int sum = 0;
	for (int x = 0; x < n; x++) {
		for (int y = 0; y < n; y++) {
			if (map[x][y] == 1) {
				int candi = -1;
				for (auto p : chi) {
					int temp = abs(x - p.first) + abs(y - p.second);
					if (candi == -1 || candi > temp) {
						candi = temp;
					}
				}
				sum += candi;
			}
		}
	}
	return sum;
}

void dfs(int cnt, int sx, int sy) {
	if (cnt == m) {
		int sum = bfs();
		if (min_val==-1||min_val > sum) {
			min_val = sum;
		}
		return;
	}
	for (int i = sx; i < n; i++) {
		for (int j = sy; j < n; j++) {
			if (map[i][j] == 2&&check[i][j]==false) {
				check[i][j] = true;
				chi.push_back(make_pair(i, j));
				dfs(cnt + 1,i,j);
				chi.pop_back();
				check[i][j] = false;
			}
		}
		sy = 0;
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);

	cin >> n >> m;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> map[i][j];
		}
	}
	min_val = -1;
	dfs(0, 0, 0);
	cout << min_val << '\n';
	return 0;
}
