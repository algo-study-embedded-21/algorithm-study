#include<iostream>
#include<vector>
using namespace std;

int n, m,ret;
int map[8][8];

struct CCTV {
	int x, y, num;
};

vector<CCTV>cctv;
int dx[] = { 0,1,0,-1 };
int dy[] = { 1,0,-1,0 };

int rot_size[5] = { 4,2,4,4,1 };

void map_copy(int a[][8], int b[][8]) {
	for (int i = 0; i < 8; i++) {
		for (int j = 0; j < 8; j++) {
			a[i][j] = b[i][j];
		}
	}
}

void update(int dir,CCTV cur) {
	dir = (dir % 4);
	int x = cur.x;
	int y = cur.y;
	while (true) {
		x += dx[dir];
		y += dy[dir];
		if (x < 0 || x >= n || y < 0 || y >= m)break;
		if (map[x][y] == 6)break;
		map[x][y] = -1;
	}
}

void dfs(int cctv_index) {
	if (cctv_index == cctv.size()) {
		int candi = 0;
		for (int x = 0; x < n; x++) {
			for (int y = 0; y < m; y++) {
				if (map[x][y] == 0) {
					candi++;
				}
			}
		}
		if (ret > candi) {
			ret = candi;
		}
		return;
	}
	int backup[8][8];
	int type = cctv[cctv_index].num;
	for (int dir = 0; dir < rot_size[type]; dir++) {
		map_copy(backup, map);
		if (type == 0) {
			update(dir, cctv[cctv_index]);
		}
		if (type == 1) {
			update(dir, cctv[cctv_index]);
			update(dir+2, cctv[cctv_index]);
		}
		if (type == 2) {
			update(dir, cctv[cctv_index]);
			update(dir+1, cctv[cctv_index]);
		}
		if (type == 3) {
			update(dir, cctv[cctv_index]);
			update(dir+1, cctv[cctv_index]);
			update(dir+2, cctv[cctv_index]);
		}
		if (type == 4) {
			update(dir, cctv[cctv_index]);
			update(dir+1, cctv[cctv_index]);
			update(dir+2, cctv[cctv_index]);
			update(dir+3, cctv[cctv_index]);
		}
		dfs(cctv_index + 1);
		map_copy(map, backup);
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);

	cin >> n >> m;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> map[i][j];
			if (1 <= map[i][j] && map[i][j] <= 5) {
				CCTV cur;
				cur.x = i;
				cur.y = j;
				cur.num = map[i][j] - 1;
				cctv.push_back(cur);
			}
		}
	}
	ret = 100;
	dfs(0);
	cout << ret << '\n';
	return 0;
}
